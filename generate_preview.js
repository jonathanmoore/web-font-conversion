const fs = require('fs');
const path = require('path');

const outputDir = path.join(__dirname, 'output');
const previewDir = path.join(__dirname, 'preview');
const cssFilePath = path.join(previewDir, 'fonts.css');
const htmlFilePath = path.join(previewDir, 'index.html');

// --- Configuration (Adjust these mappings if needed) ---
const weightMap = {
  thin: 100,
  hairline: 100,
  extralight: 200,
  ultralight: 200,
  light: 300,
  book: 400, // Often used as an alternative to Regular
  normal: 400,
  regular: 400,
  roman: 400,
  medium: 500,
  semibold: 600,
  demibold: 600,
  bold: 700,
  extrabold: 800,
  ultrabold: 800,
  black: 900,
  heavy: 900,
  extrablack: 950,
  ultrablack: 950,
};

const styleMap = {
  italic: 'italic',
  oblique: 'oblique',
};
// --- End Configuration ---

// Helper function to extract font properties from filename
function parseFontName(filename) {
  const baseName = path.basename(filename, path.extname(filename));
  const parts = baseName.split(/[-_ ]/); // Split by common separators

  let fontFamily = [];
  let weight = 'regular'; // Default weight
  let style = 'normal'; // Default style
  let weightNum = 400;

  parts.forEach((part) => {
    const lowerPart = part.toLowerCase();
    if (weightMap[lowerPart]) {
      weight = lowerPart;
      weightNum = weightMap[lowerPart];
    } else if (styleMap[lowerPart]) {
      style = styleMap[lowerPart];
    } else {
      // Assume it's part of the family name
      // Capitalize first letter for better readability (optional)
      fontFamily.push(part.charAt(0).toUpperCase() + part.slice(1));
    }
  });

  // Basic fallback if family name wasn't detected well
  if (fontFamily.length === 0) {
    fontFamily.push(parts[0] || 'UnknownFont');
  }

  return {
    family: fontFamily.join(' '),
    weight: weight,
    style: style,
    weightNum: weightNum,
    filename: filename,
    baseName: baseName,
  };
}

// --- Main Logic ---

// 1. Ensure preview directory exists
if (!fs.existsSync(previewDir)) {
  fs.mkdirSync(previewDir, { recursive: true });
  console.log(`Created directory: ${previewDir}`);
} else {
  // Clean previous CSS/HTML if they exist
  if (fs.existsSync(cssFilePath)) fs.unlinkSync(cssFilePath);
  if (fs.existsSync(htmlFilePath)) fs.unlinkSync(htmlFilePath);
}

// 2. Read fonts from output directory
let fontFiles = [];
try {
  fontFiles = fs
    .readdirSync(outputDir)
    .filter((file) => /\.(woff|woff2)$/i.test(file));
  console.log(`Found ${fontFiles.length} font files in ${outputDir}`);
} catch (err) {
  console.error(
    `Error reading output directory '${outputDir}': ${err.message}`
  );
  console.error("Did you run 'npm run build' first?");
  process.exit(1);
}

if (fontFiles.length === 0) {
  console.log(
    `No .woff or .woff2 files found in '${outputDir}'. Nothing to preview.`
  );
  process.exit(0);
}

// 3. Parse font names and group by base name (to handle woff and woff2)
const fonts = {};
fontFiles.forEach((file) => {
  const parsed = parseFontName(file);
  if (!fonts[parsed.baseName]) {
    fonts[parsed.baseName] = { ...parsed, formats: [] };
  }
  const format = path.extname(file).substring(1); // 'woff' or 'woff2'
  fonts[parsed.baseName].formats.push({
    url: path
      .relative(previewDir, path.join(outputDir, file))
      .replace(/\\/g, '/'), // Relative path for CSS
    format: format === 'woff2' ? 'woff2' : 'woff', // CSS format string
  });
});

// 4. Generate CSS content
let cssContent = `/* Generated by font-converter-preview */\n\n`;
let htmlBodyContent = `<h1>Font Preview</h1>\n<p>Generated from files in the '/output' directory.</p>\n\n`;
const generatedFamilies = {}; // Keep track of families for HTML generation

Object.values(fonts).forEach((font) => {
  const sources = font.formats
    .sort((a, b) => (a.format === 'woff2' ? -1 : 1)) // Prioritize woff2
    .map((f) => `url('${f.url}') format('${f.format}')`)
    .join(',\n       ');

  cssContent += `@font-face {\n`;
  cssContent += `  font-family: '${font.family}';\n`;
  cssContent += `  font-style: ${font.style};\n`;
  cssContent += `  font-weight: ${font.weightNum};\n`;
  cssContent += `  src: ${sources};\n`;
  cssContent += `  font-display: swap;\n`;
  cssContent += `}\n\n`;

  // Add examples to HTML
  const cssClass = `font-${font.family.replace(/\s+/g, '-')}-${font.weight}-${
    font.style
  }`.toLowerCase();
  cssContent += `.${cssClass} {\n`;
  cssContent += `  font-family: '${font.family}', sans-serif;\n`; // Add fallback
  cssContent += `  font-weight: ${font.weightNum};\n`;
  cssContent += `  font-style: ${font.style};\n`;
  cssContent += `}\n\n`;

  if (!generatedFamilies[font.family]) {
    htmlBodyContent += `<section class="font-family-section">\n`;
    htmlBodyContent += `  <h2>${font.family}</h2>\n`;
    generatedFamilies[font.family] = true; // Mark family as added
  }

  htmlBodyContent += `  <div class="font-example">\n`;
  htmlBodyContent += `    <p class="${cssClass}" style="font-size: 24px;">${
    font.family
  } ${font.weight} ${font.style !== 'normal' ? font.style : ''} (24px)</p>\n`;
  htmlBodyContent += `    <p class="${cssClass}" style="font-size: 16px;">The quick brown fox jumps over the lazy dog. 1234567890</p>\n`;
  htmlBodyContent += `    <p class="${cssClass}" style="font-size: 12px;">ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz</p>\n`;
  htmlBodyContent += `    <p class="font-details">Weight: ${font.weightNum} (${
    font.weight
  }), Style: ${font.style}, Files: ${font.formats
    .map((f) => path.basename(f.url))
    .join(', ')}</p>\n`;
  htmlBodyContent += `  </div>\n`;
});

// Close any open section tags
if (Object.keys(generatedFamilies).length > 0) {
  htmlBodyContent += `</section>\n`;
}

// 5. Generate HTML content
const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Font Preview</title>
    <link rel="stylesheet" href="fonts.css">
    <style>
        body { font-family: sans-serif; padding: 20px; line-height: 1.6; background-color: #f8f8f8; color: #333; }
        h1 { border-bottom: 2px solid #eee; padding-bottom: 10px; margin-bottom: 20px; }
        h2 { margin-top: 40px; border-bottom: 1px solid #eee; padding-bottom: 5px; color: #555; }
        .font-family-section { background-color: #fff; padding: 15px 25px; margin-bottom: 20px; border-radius: 5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .font-example { margin-bottom: 25px; padding-bottom: 15px; border-bottom: 1px dotted #ccc; }
        .font-example:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0;}
        .font-details { font-size: 0.8em; color: #777; margin-top: 10px; }
        p { margin-top: 5px; margin-bottom: 5px; }
    </style>
</head>
<body>
${htmlBodyContent}
</body>
</html>`;

// 6. Write CSS and HTML files
fs.writeFileSync(cssFilePath, cssContent);
console.log(`Generated CSS: ${cssFilePath}`);

fs.writeFileSync(htmlFilePath, htmlContent);
console.log(`Generated HTML: ${htmlFilePath}`);

console.log('\nPreview generated successfully!');
console.log(
  `Open '${path.relative(__dirname, htmlFilePath)}' in your browser.`
);
